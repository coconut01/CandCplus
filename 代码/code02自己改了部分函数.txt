#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define STU_NUM 100	//最多人数
#define TEST_NUM 35	//题目数量

struct STU
{
	char name[10];	//姓名
	int ID_num;	//学号
	char asn[TEST_NUM + 1];	//答案
	int grade;	//分数
};

STU stu[STU_NUM];	//保存数据
int total = 0;	//总人数
int ans[TEST_NUM][4];	//二维数组存储每题四个选项出现的频次
char answer[TEST_NUM];	//参考答案

//载入数据
void LoadData()	{
	char filename[] = "sample.txt";	//读取文件
	FILE *fp;
	char buffer[100];
	
	if((fp = fopen(filename,"r")) == NULL) {
		printf("没有找到或者不能打开data.txt!");
		return;
	}
	memset(buffer, 0, sizeof(buffer));
	
	while ( fgets(buffer, 100, fp ) != NULL) {
		sscanf(buffer, "%d %s %s", &stu[total].ID_num, stu[total].name, stu[total].asn);
		memset(buffer, 0, sizeof(buffer));
		total++;	//统计学生总数
	}
	fclose(fp);
}

//根据每个学生的选择得到参考答案
void GetAswer()
{
	int index, max;
	memset(&ans, 0, sizeof(ans));
	memset(answer, 0, sizeof(answer));
	
	for (int i = 0; i < total; i++) {	//遍历所有人的答案
		for (int j = 0; j < TEST_NUM; j++){
			int tmp = stu[i].asn[j] - 'A';	//体会一下什么意思？？？将A、B、C、D转换成1、2、3、4
			ans[j][tmp]++;	//二维数组存储四个选项出现的频率
		}
	}
	for (int i = 0; i < TEST_NUM; i++) {
		max = -1;
		index = -1;
		for (int j = 0; j < 4; j++) {
			if( ans[i][j] > max ) {
				max = ans[i][j];
				index = j;
			}
		}
		if ( index >= 0 ) {
			answer[i] = 'A'+ index;	//再将int 1、2、3、4转换成char A、B、C、D
		}
	}
}

//根据参考答案以及学生自己的选择得到分数
void GetGrade()
{
	for ( int i = 0; i < total; i++ )
		for ( int j = 0; j < TEST_NUM; j++ ) {
			if (answer[j] == stu[i].asn[j]) {	//将学生答案与参考答案进行对比
				if (j < 15)
					stu[i].grade += 2;	//根据不同的分值得到总成绩
				else if (j<25)
					stu[i].grade += 3;
				else
					stu[i].grade += 4;
			}
		}
}

//打印参考答案及频次
void PrintAnswer()
{
	printf("参考答案以及频次如下:\n");
	printf("%s\t %s\t %s\n", "题号", "答案", "频次");
	for (int i = 0; i < TEST_NUM; i++)
		printf("%d\t %c\t %d\n", i + 1, answer[i], ans[i][answer[i]- 'A']);

	printf("\n");
}

//按姓名查找
void SearchByName()
{
	char name[20];
	printf("要查询的名字\n");
	scanf("%s", name);
	
	for (int i = 0; i <total; i++) {
		if(strcmp(name, stu[i].name) == 0){
			printf("%s成绩为:%d\n\n", name, stu[i].grade);
			return;
		}
	}
	printf("文件中没有记录该学生相关信息!\n\n");
}

//打印所有信息
void PrintData()
{
	if (total <= 0)
		return;
	printf("%s\t %s\t %s\t\t %s\n", "排名", "学号", "姓名", "分数");
	for (int i = 0; i < total; i++) {
		printf("%d\t %d\t %s\t\t %d\n", i+1, stu[i].ID_num, stu[i].name, stu[i].grade);
	}
}

//排序
void Sort()
{
	STU tempData;
	for (int i = 0; i < total; i++)	//冒泡排序
		for (int j = 0; j < total - i; j++){
			if (stu[j].grade < stu[j + 1].grade){
				memcpy(&tempData, &(stu[j + 1]), sizeof(STU));
				memcpy(&(stu[j + 1]), &(stu[j]), sizeof(STU));
				memcpy(&(stu[j]), &tempData, sizeof(STU));
			}
		}
	PrintData();	//调用打印信息函数，将排序后的信息输出
}

//输出分析到文件
void OutputData()
{
	STU temp;
	FILE *fp;
	int gradeCount[5];	//用于存放每个分段的人数
	int maxGrade, minGrade;	//	最高分、最低分
	int totalGrade = 0;	//每个学生分数的累计和
	memset(&gradeCount, 0, sizeof(gradeCount));
	
	if (total <= 0)
		return;
	fp = fopen("result.txt", "w");
	if(!fp)
		return;

	for (int i = 0; i <total; i++)	//冒泡排序
		for (int j = 0; j< total-i; j++) {
			if(stu[j].grade < stu[j+1].grade) {
				memcpy(&temp, &(stu[j+1]), sizeof(STU));
				memcpy(&(stu[j+1]),&(stu[j]), sizeof(STU));
				memcpy(&(stu[j]), &temp, sizeof(STU));
			}
		}

		maxGrade = stu[0].grade;	//排序后第一个即为最高分
		minGrade = stu[total - 1].grade;	//排序后最后一个即为最低分
		
		fprintf(fp, "%s\t %s\t\t %s\n", "排名","姓名","分数");
		
		for (int i = 0; i < total; i++) {
			totalGrade += stu[i].grade;	//统计总分数
			fprintf(fp, "%d\t %s\t\t %d\n", i+1, stu[i].name, stu[i].grade);
			
			if (stu[i].grade < 60)		//统计各个分数段人数
				gradeCount[0]++;
			else if (stu[i].grade < 70)
				gradeCount[1]++;
			else if	(stu[i].grade < 80)
				gradeCount[2]++;
			else if (stu[i].grade < 90)
				gradeCount[3]++;
			else
				gradeCount[4]++;
		}

		fprintf( fp, "\n");
		fprintf( fp, "各分数段人数如下：\n"
			"0~59分数人数为:%d\n"
			"60~-69分数人数为:%d\n"
			"70~79分数人数为:%d\n"
			"80~890分数人数为:%d\n"
			"90~100分数人数为:%d\n", gradeCount[0], gradeCount[1], gradeCount[2], gradeCount[3], gradeCount[4]);
		fprintf( fp, "最高分为:%d\n"
			"最低分为:%d\n" , maxGrade, minGrade);
		fprintf( fp, 
			"平均分为:%.2f\n"
			"及格率为:%.2f\n" ,
			(double)totalGrade / total, (double)(gradeCount[1] + gradeCount[2] + gradeCount[3] + gradeCount[4]) / total );
		printf("\n输出完成!\n\n");
		fclose(fp);
}

//程序主菜单
void MainMenu()
{
	puts("------------------------------------\n"
		"           模拟改卷系统\n"
		"-------------------------------------\n");
	puts("1、输出参考答案及频次");
	puts("2、按姓名查询学生成绩");
	puts("3、按成绩降序对学生信息进行排序");
	puts("4、输出成绩单及试卷分析到文件");
	puts("5、退出系统");
	
	int choise, flag = 1;
	
	while(flag){
		
		printf("请输入你要选择功能序号：\n");
		scanf("%d", &choise);
		if( 0 < choise && choise < 6 ){
			switch(choise) {
		case 1 :
			PrintAnswer();
			break;
		case 2:
			SearchByName();
			break;
		case 3:											       
			Sort();
			break;
		case 4:
			OutputData();
			break;
		case 5:
			flag = 0;
			break;
		
		}
			
		}
		else
			printf("输入有误，请重新输入1-5之间的整数！\n");
	}
	
}

int main()
{
	LoadData();
	GetAswer();
	GetGrade();
	MainMenu();
	return 0;
}